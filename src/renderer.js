document.addEventListener('DOMContentLoaded', async function () {

    // ‰øÆÊîπ‰∏∫‰Ω†ÁöÑÁΩëÁ´ô
    const PREDEFINED_PROFILES = [
        { id: 'deepseek', name: 'DeepSeek', url: 'https://chataiapi.com/detail' },
        { id: 'gemini', name: 'Gemini', url: 'https://chataiapi.com/detail' },
        { id: 'ai', name: 'Â∞èÁà±AI', url: 'https://xiaoai.plus/detail' },
        { id: 'xf', name: 'ËÆØÈ£û', url: 'https://console.xfyun.cn/services/bm4' },
        { id: 'bigmodel', name: 'Ë¥®Ë∞±', url: 'https://open.bigmodel.cn/finance/resourcepack?tab=my' },
    ];

    const tabsContainer = document.getElementById('tabs');
    const webviewContainer = document.getElementById('webviewContainer');
    const nightModeButton = document.getElementById('night-mode-btn');

    // Â§úÈó¥Ê®°ÂºèÁä∂ÊÄÅ
    let nightModeEnabled = false;

    let nightModeIntensity = 85;
    let nightModeBrightness = 110;
    let nightModeContrast = 110;

    // ÁΩëÁ´ôÂ§úÈó¥Ê®°ÂºèËÆæÁΩÆ
    let siteNightModes = {};

    // ÂΩìÂâçÈÄâ‰∏≠ÁöÑÊ†áÁ≠æID
    let currentProfileId = null;

    // Âä†ËΩΩÂÖ®Â±ÄÂ§úÈó¥Ê®°ÂºèËÆæÁΩÆ
    async function loadNightModeSettings() {
        try {
            // Âä†ËΩΩÂÖ®Â±ÄÂ§úÈó¥Ê®°ÂºèÁä∂ÊÄÅ
            if (window.electronAPI.getNightModeState) {
                nightModeEnabled = await window.electronAPI.getNightModeState() || false;
            }

            // Âä†ËΩΩÂ§úÈó¥Ê®°ÂºèÂèÇÊï∞ËÆæÁΩÆ
            if (window.electronAPI.getNightModeSettings) {
                const settings = await window.electronAPI.getNightModeSettings();
                if (settings) {
                    nightModeIntensity = settings.intensity || 85;
                    nightModeBrightness = settings.brightness || 110;
                    nightModeContrast = settings.contrast || 110;
                }
            }

            // Âä†ËΩΩÊØè‰∏™ÁΩëÁ´ôÁöÑÂ§úÈó¥Ê®°ÂºèËÆæÁΩÆ
            if (window.electronAPI.getAllSiteNightModes) {
                siteNightModes = await window.electronAPI.getAllSiteNightModes() || {};
            }

            // Â∫îÁî®Â§úÈó¥Ê®°ÂºèÊ†∑Âºè
            applyNightModeStyle();
            updateNightModeUI();
        } catch (error) {
            console.error('Âä†ËΩΩÂ§úÈó¥Ê®°ÂºèËÆæÁΩÆÂ§±Ë¥•', error);
        }
    }

    // ÂàùÂßãÂä†ËΩΩËÆæÁΩÆ
    await loadNightModeSettings();

    // Êõ¥Êñ∞Â§úÈó¥Ê®°ÂºèUI
    function updateNightModeUI() {
        // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
        if (nightModeEnabled) {
            nightModeButton.classList.add('active');
            nightModeButton.textContent = 'üåô'; // Â§úÈó¥Ê®°ÂºèÂºÄÂêØÊó∂ÊòæÁ§∫Êúà‰∫Æ
            nightModeButton.title = 'ÂàáÊç¢Âà∞Êó•Èó¥Ê®°Âºè';
        } else {
            nightModeButton.classList.remove('active');
            nightModeButton.textContent = '‚òÄÔ∏è'; // Êó•Èó¥Ê®°ÂºèÂºÄÂêØÊó∂ÊòæÁ§∫Â§™Èò≥
            nightModeButton.title = 'ÂàáÊç¢Âà∞Â§úÈó¥Ê®°Âºè';
        }

        // Êõ¥Êñ∞ÊâÄÊúâwebview
        document.querySelectorAll('webview').forEach(webview => {
            const profileId = webview.id.replace('webview-', '');
            const siteSetting = siteNightModes[profileId];

            // Â¶ÇÊûúÁΩëÁ´ôÊúâÁâπÂÆöËÆæÁΩÆÔºå‰ΩøÁî®ËØ•ËÆæÁΩÆÔºõÂê¶Âàô‰ΩøÁî®ÂÖ®Â±ÄËÆæÁΩÆ
            const shouldApplyNightMode = siteSetting !== undefined ? siteSetting : nightModeEnabled;

            if (shouldApplyNightMode) {
                webview.classList.add('night-mode');
            } else {
                webview.classList.remove('night-mode');
            }
        });
    }

    // Âä®ÊÄÅÂ∫îÁî®Â§úÈó¥Ê®°ÂºèÊ†∑Âºè
    function applyNightModeStyle() {
        const styleEl = document.getElementById('night-mode-dynamic-style') || document.createElement('style');
        styleEl.id = 'night-mode-dynamic-style';

        styleEl.textContent = `
        webview.night-mode {
          filter: invert(${nightModeIntensity}%) hue-rotate(180deg) brightness(${nightModeBrightness}%) contrast(${nightModeContrast}%);
        }
        
        webview.night-mode img,
        webview.night-mode video,
        webview.night-mode canvas {
          filter: invert(100%) hue-rotate(180deg) brightness(100%);
        }
      `;

        if (!document.getElementById('night-mode-dynamic-style')) {
            document.head.appendChild(styleEl);
        }
    }

    // Ê∑ªÂä†Á™óÂè£ÊéßÂà∂ÂäüËÉΩ
    document.getElementById('minimize-btn').addEventListener('click', () => {
        window.electronAPI.minimizeWindow();
    });

    document.getElementById('maximize-btn').addEventListener('click', async () => {
        const isMaximized = await window.electronAPI.maximizeWindow();
        document.getElementById('maximize-btn').innerText = isMaximized ? '‚ùê' : '‚ñ°';
    });

    document.getElementById('close-btn').addEventListener('click', () => {
        window.electronAPI.closeWindow();
    });

    // Â§úÈó¥Ê®°ÂºèÂàáÊç¢ÂäüËÉΩ
    nightModeButton.addEventListener('click', async () => {
        nightModeEnabled = !nightModeEnabled;

        // ‰øùÂ≠òÂ§úÈó¥Ê®°ÂºèÁä∂ÊÄÅ
        if (window.electronAPI.saveNightModeState) {
            try {
                await window.electronAPI.saveNightModeState(nightModeEnabled);
            } catch (error) {
                console.error('‰øùÂ≠òÂ§úÈó¥Ê®°ÂºèÁä∂ÊÄÅÂ§±Ë¥•', error);
            }
        }

        updateNightModeUI();
    });

    // Â§úÈó¥Ê®°ÂºèÂè≥ÈîÆËèúÂçï
    nightModeButton.addEventListener('contextmenu', (e) => {
        e.preventDefault();

        // È¶ñÂÖàÂà†Èô§ÂèØËÉΩÂ≠òÂú®ÁöÑÊóßËèúÂçï
        const oldDialog = document.querySelector('.settings-dialog');
        if (oldDialog) {
            document.body.removeChild(oldDialog);
        }

        // ÂàõÂª∫ËèúÂçïÂØπËØùÊ°Ü
        const settingsDialog = document.createElement('div');
        settingsDialog.className = 'settings-dialog';
        settingsDialog.style.position = 'fixed';
        settingsDialog.style.top = '50px';
        settingsDialog.style.right = '10px';
        settingsDialog.style.backgroundColor = '#2a2a2a';
        settingsDialog.style.border = '1px solid #444';
        settingsDialog.style.padding = '15px';
        settingsDialog.style.zIndex = '1000';
        settingsDialog.style.borderRadius = '5px';
        settingsDialog.style.boxShadow = '0 4px 8px rgba(0,0,0,0.3)';
        settingsDialog.style.width = '300px';
        settingsDialog.style.maxHeight = '500px';
        settingsDialog.style.overflowY = 'auto';

        // Ê∑ªÂä†ÂàùÂßãÂä®ÁîªÊïàÊûú
        settingsDialog.style.opacity = '0';
        settingsDialog.style.transform = 'translateY(-10px)';
        settingsDialog.style.transition = 'opacity 0.2s ease, transform 0.2s ease';

        // ÂàõÂª∫Ê†áÈ¢ò
        const title = document.createElement('h3');
        title.style.margin = '0 0 15px 0';
        title.style.color = '#fff';
        title.style.borderBottom = '1px solid #444';
        title.style.paddingBottom = '10px';
        title.textContent = 'Â§úÈó¥Ê®°ÂºèËÆæÁΩÆ';
        settingsDialog.appendChild(title);

        // ÁΩëÁ´ôÁâπÂÆöËÆæÁΩÆÈÉ®ÂàÜ
        const siteSettings = document.createElement('div');

        // ‰∏∫ÊØè‰∏™ÁΩëÁ´ôÂàõÂª∫ÂçïÁã¨ÁöÑËÆæÁΩÆ
        PREDEFINED_PROFILES.forEach(profile => {
            const siteContainer = document.createElement('div');
            siteContainer.style.display = 'flex';
            siteContainer.style.justifyContent = 'space-between';
            siteContainer.style.alignItems = 'center';
            siteContainer.style.marginBottom = '8px';
            siteContainer.style.padding = '5px';
            siteContainer.style.borderRadius = '3px';

            // Ê†áËÆ∞ÂΩìÂâçÈÄâ‰∏≠ÁöÑÁΩëÁ´ô
            if (currentProfileId === profile.id) {
                siteContainer.style.backgroundColor = '#3a3a3a';
            }

            const siteName = document.createElement('span');
            siteName.style.color = '#ddd';
            siteName.textContent = profile.name;

            const optionsContainer = document.createElement('div');

            // ‰ΩøÁî®ÂÖ®Â±ÄËÆæÁΩÆÈÄâÈ°π
            const useGlobalOption = document.createElement('label');
            useGlobalOption.style.marginRight = '10px';
            useGlobalOption.style.color = '#bbb';
            useGlobalOption.style.cursor = 'pointer';

            const useGlobalRadio = document.createElement('input');
            useGlobalRadio.type = 'radio';
            useGlobalRadio.name = `night-mode-${profile.id}`;
            useGlobalRadio.value = 'global';
            useGlobalRadio.style.marginRight = '5px';
            useGlobalRadio.checked = siteNightModes[profile.id] === undefined;

            useGlobalOption.appendChild(useGlobalRadio);
            useGlobalOption.appendChild(document.createTextNode('ÂÖ®Â±Ä'));

            // ÂßãÁªàÂºÄÂêØÈÄâÈ°π
            const alwaysOnOption = document.createElement('label');
            alwaysOnOption.style.marginRight = '10px';
            alwaysOnOption.style.color = '#bbb';
            alwaysOnOption.style.cursor = 'pointer';

            const alwaysOnRadio = document.createElement('input');
            alwaysOnRadio.type = 'radio';
            alwaysOnRadio.name = `night-mode-${profile.id}`;
            alwaysOnRadio.value = 'on';
            alwaysOnRadio.style.marginRight = '5px';
            alwaysOnRadio.checked = siteNightModes[profile.id] === true;

            alwaysOnOption.appendChild(alwaysOnRadio);
            alwaysOnOption.appendChild(document.createTextNode('ÂºÄ'));

            // ÂßãÁªàÂÖ≥Èó≠ÈÄâÈ°π
            const alwaysOffOption = document.createElement('label');
            alwaysOffOption.style.color = '#bbb';
            alwaysOffOption.style.cursor = 'pointer';

            const alwaysOffRadio = document.createElement('input');
            alwaysOffRadio.type = 'radio';
            alwaysOffRadio.name = `night-mode-${profile.id}`;
            alwaysOffRadio.value = 'off';
            alwaysOffRadio.style.marginRight = '5px';
            alwaysOffRadio.checked = siteNightModes[profile.id] === false;

            alwaysOffOption.appendChild(alwaysOffRadio);
            alwaysOffOption.appendChild(document.createTextNode('ÂÖ≥'));

            optionsContainer.appendChild(useGlobalOption);
            optionsContainer.appendChild(alwaysOnOption);
            optionsContainer.appendChild(alwaysOffOption);

            siteContainer.appendChild(siteName);
            siteContainer.appendChild(optionsContainer);
            siteSettings.appendChild(siteContainer);

            // Ê∑ªÂä†ÈÄâÈ°πÊîπÂèò‰∫ã‰ª∂
            [useGlobalRadio, alwaysOnRadio, alwaysOffRadio].forEach(radio => {
                radio.addEventListener('change', async (e) => {
                    if (e.target.checked) {
                        let value;
                        switch (e.target.value) {
                            case 'on':
                                value = true;
                                break;
                            case 'off':
                                value = false;
                                break;
                            case 'global':
                            default:
                                value = undefined;
                                break;
                        }

                        // Êõ¥Êñ∞ÂÜÖÂ≠ò‰∏≠ÁöÑÁΩëÁ´ôËÆæÁΩÆ
                        if (value === undefined) {
                            delete siteNightModes[profile.id];
                        } else {
                            siteNightModes[profile.id] = value;
                        }

                        // ‰øùÂ≠òËÆæÁΩÆÂà∞Â≠òÂÇ®
                        if (window.electronAPI.saveSiteNightMode) {
                            await window.electronAPI.saveSiteNightMode(profile.id, value === undefined ? null : value);
                        }

                        // Á´ãÂç≥Â∫îÁî®ËÆæÁΩÆ
                        updateNightModeUI();
                    }
                });
            });
        });

        settingsDialog.appendChild(siteSettings);
        document.body.appendChild(settingsDialog);

        // ÂêØÂä®Âä®ÁîªÊïàÊûú
        setTimeout(() => {
            settingsDialog.style.opacity = '1';
            settingsDialog.style.transform = 'translateY(0)';
        }, 10);

        // ÈòªÊ≠¢Âè≥ÈîÆËèúÂçï‰∏äÁöÑÁÇπÂáª‰∫ã‰ª∂ÂÜíÊ≥°
        e.stopPropagation();

        // ÂÖ≥Èó≠ÂØπËØùÊ°ÜÁöÑÂáΩÊï∞
        function closeSettingsDialog() {
            // Ê∑ªÂä†ÂÖ≥Èó≠Âä®Áîª
            settingsDialog.style.opacity = '0';
            settingsDialog.style.transform = 'translateY(-10px)';

            // Á≠âÂæÖÂä®ÁîªÂÆåÊàêÂêéÁßªÈô§ÂØπËØùÊ°Ü
            setTimeout(() => {
                if (document.body.contains(settingsDialog)) {
                    document.body.removeChild(settingsDialog);
                }
            }, 200);
        }

        // ÈòªÊ≠¢ÁÇπÂáªËèúÂçï‰∫ã‰ª∂ÂÜíÊ≥°
        settingsDialog.addEventListener('click', (e) => {
            e.stopPropagation();
        });

        // ÂàõÂª∫‰∏Ä‰∏™ÈÅÆÁΩ©Â±ÇÊù•ÊçïËé∑ÊâÄÊúâÁÇπÂáª‰∫ã‰ª∂
        const overlay = document.createElement('div');
        overlay.style.position = 'fixed';
        overlay.style.top = '0';
        overlay.style.left = '0';
        overlay.style.right = '0';
        overlay.style.bottom = '0';
        overlay.style.zIndex = '999';
        document.body.appendChild(overlay);

        // ÁÇπÂáªÈÅÆÁΩ©Â±ÇÂÖ≥Èó≠ËèúÂçï
        overlay.addEventListener('click', () => {
            closeSettingsDialog();
            document.body.removeChild(overlay);
        });
    });

    // Ê∏≤ÊüìÊ†áÁ≠æÈ°µ
    function renderTabs() {
        tabsContainer.innerHTML = '';

        PREDEFINED_PROFILES.forEach(profile => {
            const tab = document.createElement('div');
            tab.className = 'tab';
            tab.id = `tab-${profile.id}`;
            tab.textContent = profile.name;
            tab.addEventListener('click', () => selectTab(profile.id));

            tabsContainer.appendChild(tab);

            // ÂàõÂª∫webviewÂÖÉÁ¥†
            if (!document.getElementById(`webview-${profile.id}`)) {
                const webview = document.createElement('webview');
                webview.id = `webview-${profile.id}`;
                webview.setAttribute('src', profile.url);
                webview.setAttribute('partition', `persist:${profile.id}`);
                webview.setAttribute('allowpopups', 'true');
                webview.setAttribute('disablewebsecurity', 'false');
                webview.setAttribute('webpreferences', 'allowRunningInsecureContent=false');

                // ÁõëÂê¨webviewÂä†ËΩΩÂÆåÊàê‰∫ã‰ª∂Ôºå‰øùÂ≠òcookies
                webview.addEventListener('dom-ready', () => {
                    saveCookies(profile.id, webview);
                });

                webviewContainer.appendChild(webview);
            }
        });

        // ÈªòËÆ§ÈÄâ‰∏≠Á¨¨‰∏Ä‰∏™Ê†áÁ≠æÈ°µ
        if (PREDEFINED_PROFILES.length > 0) {
            selectTab(PREDEFINED_PROFILES[0].id);
        }

        // Êõ¥Êñ∞Â§úÈó¥Ê®°ÂºèÂ∫îÁî®Áä∂ÊÄÅ
        updateNightModeUI();
    }

    // ÈÄâÊã©Ê†áÁ≠æÈ°µ
    function selectTab(profileId) {
        // ËÆ∞ÂΩïÂΩìÂâçÈÄâ‰∏≠ÁöÑÊ†áÁ≠æ
        currentProfileId = profileId;

        // ÁßªÈô§ÊâÄÊúâÊ¥ªÂä®Ê†áËÆ∞
        document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
        document.querySelectorAll('webview').forEach(webview => webview.classList.remove('active'));

        // Ê∑ªÂä†Ê¥ªÂä®Ê†áËÆ∞Âà∞ÈÄâ‰∏≠ÁöÑÊ†áÁ≠æÂíåwebview
        document.getElementById(`tab-${profileId}`).classList.add('active');
        document.getElementById(`webview-${profileId}`).classList.add('active');
    }

    // ‰øùÂ≠òcookies
    async function saveCookies(profileId, webview) {
        try {
            const cookies = await webview.executeJavaScript(`document.cookie`);
            if (cookies) {
                await window.electronAPI.saveCookies(profileId, cookies);
                console.log(`‰øùÂ≠òcookies: ${profileId}`);
            }
        } catch (error) {
            console.error(`‰øùÂ≠òcookiesÂ§±Ë¥•: ${profileId}`, error);
        }
    }

    // ÂàùÂßãÂåñÊ∏≤Êüì
    renderTabs();
});